/* Auto-generated lookup table from glibc's wcwidth results */

// ---------- Build widths array ----------
const MAX_CP = 0x10FFFF;
const widths = new Uint8Array(MAX_CP + 1);

// Start with everything as non-printable
widths.fill(0xFF);

const cp0 = [0,1471,8,85,84,161,236,317,2,17,52,59,17,49,62,21,36,71,17,52,59,3,14,53,62,13,51,4,56,69,59,3,7,135,52,73,12,91,128,132,2,2,141,188,11,16,1833,23,204,137,233,59,10,2,29,181,8,6,164,7,256,7,4235,997,30366,4,5,33,211,180,50,94,9,48,52,17,53,239,3,5,20273,993,161,605,227,1887,1474,111,82,177,92,101,10,3,158,97,142,2,2,116,24,92,387,110,2,10,102,2,543,5,157,103,504,251,13,78,2,425,2,24,5350,15119,149,27281,15,1547,543,793939];
const cp1 = [908,562,2,3,3,85,206,200,105,10,4,54,132,89,119,28,9,44,91,24,13,70,7,41,71,23,44,25,52,7,102,32,352,199,33,24,9,112,2,71,6,172,7,143,6,395,104,1109,161,244,150,279,10,212,6,111,61,7,229,14,25,607,2,2,1943,89,9,1489,6,786,30260,352,396,238,100,15,2,20571,33,657,977,1640,52,259,1390,339,117,88,95,265,83,200,7,52,3,52,3,10,2,116,24,92,8,253,128,110,10,104,8,274,3,206,52,195,80,71,423,107,8,3,146,80,2,425,111,19269,20903,3,5542,605,25,139,3513,768,844,1241,3,18,2,7,5,2,2,9,3,2,2,2,2,5,26,1208,71,194,2,270,1004,11];
const cp2 = [9200,3,652,20,14,45,6,22,11,5,3,8,35,36,2,9,89,15,913,5,99805,35,16047,203,191,614,76,314,42,296,292];
const range0 = [768,111,276,6,264,44,4,1,2,1,75,10,49,20,119,6,3,5,3,1,2,3,67,26,92,10,59,8,35,3,2,8,2,2,2,4,44,2,60,8,43,23,2,31,63,7,9,6,11,1,94,3,30,1,30,1,63,1,5,1,3,2,35,1,16,1,63,4,2,1,26,1,23,5,66,3,17,1,12,1,219,2,6,2,2,3,8,1,12,1,105,1,21,1,29,1,58,1,5,3,30,1,111,2,96,6,13,7,102,8,12,6,74,1,88,13,2,4,2,1,6,10,2,35,113,3,2,5,2,1,3,1,26,1,5,2,17,3,17,1,218,159,350,2,947,2,30,1,31,1,31,1,65,1,2,6,12,10,56,4,118,1,154,2,5,1,17,2,220,1,64,6,7,7,7,9,52,30,50,3,51,4,49,8,13,1,33,3,3,1,2,2,59,1,6,2,59,7,3,1,153,2,2,12,2,6,16,1,199,63,524,4,27,4,50,4,2,9,97,32,3071,2,239,31,555,3,108,1,30165,3,2,9,33,1,81,1,308,1,158,1,27,17,53,7,26,10,47,2,52,3,3,1,108,5,3,1,3,1,124,2,3,1,6,1,45,1,11459,22,5,48,9733,15,17,15,1351,4,1671,2,2,1,6,3,41,2,171,1,574,3,66,4,318,1,80,3,71,10,50,3,179,14,45,1,11,2,50,3,3,1,70,2,37,4,2,7,76,1,53,8,11,3,99,2,5,1,172,7,22,1,58,1,42,6,4,4,71,5,33,1,86,7,3,2,111,5,7,1,2,1,239,3,7,1,2,1,28,1,86,7,5,1,112,5,109,3,2,4,260,8,2,1,257,1,152,3,3,1,38,9,41,5,3,3,19,5,3,2,47,12,2,1,407,6,2,5,85,21,3,6,2,1,2,1,123,5,6,1,2,6,75,1,354,1,12,1,53,4,5389,14,11465,11,4,2,2497,4,60,6,1113,3,19723,1,2,3,4701,45,3,22,545,2,10,15,3,6,31,3,149,2,1980,54,5,49,47,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,438,3,509,3,255,1,737,6,110,6,792278,95,129,239];
const range1 = [32,94,34,607,113,7,3,5,5,6,4,19,2,223,8,165,2,37,3,49,3,2,65,26,5,5,12,15,14,45,22,15,2,100,8,1,7,1,8,31,2,1,2,29,30,88,27,42,10,6,4,23,27,14,2,24,8,10,6,30,2,1,15,41,58,54,4,3,9,3,2,2,8,9,3,28,2,1,2,7,3,1,3,21,2,6,6,3,4,3,7,1,3,1,16,1,2,2,5,23,8,5,5,1,3,21,2,6,2,1,2,1,2,1,5,2,25,3,10,9,3,2,17,8,2,2,2,21,2,6,2,1,2,4,4,3,11,1,20,1,5,11,17,1,2,7,3,1,3,21,2,6,2,1,2,4,4,1,9,1,3,1,16,1,2,2,5,17,14,5,4,2,2,3,4,1,4,1,4,1,4,2,4,11,5,1,2,1,4,2,2,2,26,20,7,2,2,7,2,2,2,22,2,15,8,3,20,2,6,1,5,9,8,9,2,10,2,2,2,22,2,9,2,4,4,1,2,4,3,1,2,1,10,1,7,1,2,1,5,9,2,2,15,10,2,2,2,40,3,3,6,2,2,2,2,1,5,13,5,25,3,1,2,17,4,23,2,8,5,6,9,2,7,7,7,9,3,2,13,47,2,1,12,7,9,12,38,1,4,4,2,23,4,9,2,1,13,4,12,9,3,3,33,23,3,26,6,13,2,35,28,4,50,7,2,5,2,12,38,44,15,1,3,24,3,3,4,15,5,12,2,1,3,5,2,14,2,39,11,47,257,72,2,3,3,6,4,3,3,40,2,3,3,32,2,3,3,6,4,3,3,14,2,56,2,3,3,66,6,28,4,25,7,85,3,5,3,668,4,88,8,17,14,18,3,2,10,17,15,12,2,2,16,51,11,7,2,1,12,8,4,9,7,9,7,10,6,9,7,88,8,4,3,33,8,69,11,30,5,3,3,2,5,1,2,5,12,41,3,4,12,43,5,25,7,10,4,56,3,1,4,55,14,1,9,5,14,9,7,9,7,13,87,47,10,4,2,9,2,28,10,11,3,31,5,1,7,55,5,2,6,1,9,47,9,1,6,14,4,61,6,42,3,10,34,3,2,5,2,2,9,191,65,277,3,5,3,37,3,5,3,7,8,30,3,52,2,14,2,13,3,5,2,18,3,2,2,8,2,10,6,23,8,48,17,1,3,26,2,12,4,32,64,139,5,393,3,12,3,189,5,2,2,1,2,53,23,10,22,412,3,20,3,25,9,15,13,42,2,9,7,2,2,12,2,7,3,16,3,4,3,7,2,4,2,20,2,6,5,3,2,1,2,6,2,3,3,27,2,34,4,3,6,60,4,23,2,13,2,858,3,50,2,3,2,29,3,31,2,343,4,1,6,44,11,55,8,1,16,22,10,6,2,6,2,6,2,6,2,6,2,6,2,6,2,6,34,93,30323,347,21,46,16,31,3,79,3,5,9,205,3,1,4,7,22,15,2,2,2,3,2,24,3,4,5,9,7,55,9,67,11,11,25,12,2,37,9,24,12,1,48,47,2,1,5,1,3,15,2,10,5,6,2,24,2,40,7,1,3,1,12,2,2,7,5,9,3,31,2,50,6,1,3,4,30,16,3,7,12,5,3,5,3,5,10,6,2,6,2,59,5,116,2,1,2,3,4,9,13319,6399,513,6,13,4,8,23,2,4,4,1,2,1,2,124,17,444,3,53,41,15,113,4,2,134,101,62,2,29,4,5,3,5,3,5,3,2,12,6,11,4,3,11,2,25,2,18,2,1,2,14,3,13,35,122,6,2,5,44,4,87,2,12,52,44,132,28,4,48,17,26,5,35,10,29,6,37,11,29,2,36,5,13,43,157,3,9,7,35,5,35,5,39,9,51,12,11,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,5,43,2,1,7,22,2,71,9,8,49,18,2,1,6,32,4,26,71,55,5,19,3,46,16,3,2,2,2,28,11,8,8,8,8,63,33,36,7,11,10,53,4,28,3,26,6,25,8,3,13,6,81,72,56,50,14,50,8,41,13,9,7,37,9,23,9,1,209,30,2,41,7,1,17,2,60,39,9,21,12,8,23,17,5,3,39,27,21,22,12,53,16,6,5,29,2,1,16,48,5,1,3,6,15,24,8,9,10,35,16,17,9,34,2,2,12,51,10,9,5,1,2,15,2,19,12,17,2,27,4,1,5,5,2,1,64,6,4,3,2,14,2,10,7,46,2,2,14,9,9,1,2,7,3,1,3,21,2,6,2,1,2,4,4,2,2,3,3,1,3,2,16,6,29,9,7,37,2,3,13,3,2,1,6,2,2,1,40,55,9,1,6,20,4,2,31,50,9,3,6,3,9,9,167,49,7,3,6,26,37,50,9,1,5,3,12,9,7,12,20,42,4,1,9,1,7,9,7,19,29,26,6,1,15,22,186,46,114,82,13,7,6,7,2,1,2,29,2,1,7,3,2,2,10,9,71,7,3,41,9,3,2,3,39,39,7,1,5,7,17,1,4,45,17,8,14,72,8,9,183,33,15,9,7,8,2,37,17,5,11,28,4,31,113,6,2,1,2,37,32,9,7,5,2,1,2,36,5,1,12,9,311,18,3,3,10,14,2,35,9,1,4,22,103,49,14,922,103,110,2,4,12,195,2637,98,14,1087,2,5,26,3994,6,582,6842,29,13,2,4,9,1735,568,8,30,2,9,5,80,2,9,7,29,19,47,8,14,11,9,2,6,2,20,6,18,433,57,199,90,102,74,6,55,12,12,19553,106,6,12,4,8,8,9,3943,249,7,435,157,115,61,245,11,38,3,61,4,8,17,1,8,29,5,60,22,65,127,19,13,19,132,1,136,84,2,70,2,1,6,1,3,3,2,11,4,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,6,6,2,339,3,291,3,561,56,3,51,7,2,13,2,6,1141,30,7,5,262,61,147,44,11,6,3,9,5,1,321,29,19,43,5,9,471,27,5,9,215,29,3,10,486,6,2,3,2,1,2,14,2,196,3,8,49,67,13,9,5,1,786,67,77,60,195,3,2,26,2,1,7,9,2,3,22,2,2,1,15,1,5,3,2,6,2,3,2,3,4,9,2,16,6,2,2,4,2,16,53,1,271,3,2,38,5,99,13,14,3,14,2,13,3,36,11,141,2,1,11,18,57,25,290,11,104,11,44,3,6,11,18,2,2,2,262,1,64,12,30,17,2,25,3,12,2,85,86,47,71,5,2,2,4,1,12,10,6,3,13,118,5,94,39,11,5,55,9,9,7,39,9,29,3,11,5,1,63,11,245,83,13,13,147,146,2,101,852999,65533,3,65533];
const range2 = [4352,95,4539,1,14,1,191,3,529,1,22,1,27,7,17,11,55,5,27,1,18,1,6,1,45,1,23,1,72,2,64,2,900,1,868,25,2,88,13,213,27,57,5,16,3,85,5,100,6,42,2,50,2,41,2,85,10,47,2,29292,4,54,1178,28,644,11171,8541,365,3,105,823,9,23,34,2,18,2,3,150,95,128,6,28666,3,13,1,15,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,8197,86,10,22,7707,9,102,2,14,43,5,8,8,1,15,5,155,32,13,8,2,69,2,21,13,42,5,4,13,16,8,70,4,186,3,62,14,3,2,23,46,1,101,84,49,69,11,2,3,2,5,3,12,1,8,8,228,11,289,46,2,9,2,184,113,12,4,9,6,55,8,14,3,10,7,8,1288,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];

const cps = [cp0, cp1, cp2];
for (let i = 0; i <= 2; i++) {
  let curr = 0;
  for (const cp of cps[i]) {
    curr += cp;
    widths[curr] = i;
  }
}

const ranges = [range0, range1, range2];
for (let i = 0; i <= 2; i++) {
  let curr = 0;
  for (let j = 0; j < ranges[i].length; j += 2) {
    const start = curr + ranges[i][j];
    const end = start + ranges[i][j + 1];
    for (let cp = start; cp <= end; cp++) {
      widths[cp] = i;
    }
    curr = end;
  }
}

// ---------- Build lookup table ----------
const SHIFT2 = 5;
const SHIFT1 = 11;
const MASK3 = (1 << SHIFT2) - 1;
const MASK2 = (1 << (SHIFT1 - SHIFT2)) - 1;
const TOP_BOUND = (0x10FFFF >> SHIFT1) + 1;

const L2Blocks: Uint32Array[] = [];
const leafBlocks: Uint8Array[] = [];

for (let i1 = 0; i1 < TOP_BOUND; i1++) {
  const L2tab = new Uint32Array(MASK2 + 1);

  for (let i2 = 0; i2 < L2tab.length; i2++) {
    const baseCp = (i1 << SHIFT1) | (i2 << SHIFT2);
    const leaf = new Uint8Array(MASK3 + 1);

    for (let i3 = 0; i3 <= MASK3; i3++) {
      const cp = baseCp + i3;
      leaf[i3] = cp <= 0x10FFFF ? widths[cp] : 0xFF;
    }

    if (baseCp <= 0x10FFFF) {
      leafBlocks.push(leaf);
      L2tab[i2] = leafBlocks.length; // temporary index
    }
  }

  L2Blocks.push(L2tab);
}

const HEADER_BYTES = 5 * 4;
const L1_BYTES = TOP_BOUND * 4;
const L2_TOTAL = L2Blocks.reduce((sum, tab) => sum + tab.length * 4, 0);
const LEAF_TOTAL = leafBlocks.length * (MASK3 + 1);
const TOTAL_BYTES = HEADER_BYTES + L1_BYTES + L2_TOTAL + LEAF_TOTAL;

const LOOKUP_TABLE = new Uint8Array(TOTAL_BYTES);
const view = new DataView(LOOKUP_TABLE.buffer);

// Header
view.setUint32(0, SHIFT1, true);
view.setUint32(4, TOP_BOUND, true);
view.setUint32(8, SHIFT2, true);
view.setUint32(12, MASK2, true);
view.setUint32(16, MASK3, true);

// Offsets
let L2ptr = HEADER_BYTES + L1_BYTES;
let LEAFptr = L2ptr + L2_TOTAL;

for (let i1 = 0; i1 < TOP_BOUND; i1++) {
  const L2tab = L2Blocks[i1];
  view.setUint32(20 + i1 * 4, L2ptr, true);

  for (let i2 = 0; i2 < L2tab.length; i2++) {
    const leafIndex = L2tab[i2];
    if (leafIndex) {
      view.setUint32(L2ptr + i2 * 4, LEAFptr, true);
      LOOKUP_TABLE.set(leafBlocks[leafIndex - 1], LEAFptr);
      LEAFptr += MASK3 + 1;
    } else {
      view.setUint32(L2ptr + i2 * 4, 0, true);
    }
  }

  L2ptr += L2tab.length * 4;
}

/**
 * Wcwidth lookup table.
 */
export const TABLE: Uint8Array = LOOKUP_TABLE;
